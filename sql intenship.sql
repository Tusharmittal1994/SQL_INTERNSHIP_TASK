CREATE DATABASE ORG;
CREATE TABLE Customers ( CustomerID INT PRIMARY KEY, Name VARCHAR(255),
Email VARCHAR(255),
JoinDate DATE
);

CREATE TABLE Products ( ProductID INT PRIMARY KEY, Name VARCHAR(255),
Category VARCHAR(255), Price DECIMAL(10, 2)
);

CREATE TABLE Orders ( OrderID INT PRIMARY KEY,
CustomerID INT, OrderDate DATE,
TotalAmount DECIMAL(10, 2),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);
CREATE TABLE OrderDetails ( OrderDetailID INT PRIMARY KEY, OrderID INT,
ProductID INT, Quantity INT,
PricePerUnit DECIMAL(10, 2),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);
INSERT INTO Customers (CustomerID, Name, Email, JoinDate) VALUES
(1, 'John Doe', 'johndoe@example.com', '2020-01-10'),
(2, 'Jane Smith', 'janesmith@example.com', '2020-01-15'),
(3, 'Rossale kennedy', 'rossale@example.com', '2020-03-30'),
(4, 'Mark taylor', 'mark@example.com', '2020-04-04'),
(5, 'Jason farnandis', 'jason@example.com', '2020-04-05'),
(6, 'Lovely george', 'lovely@example.com', '2020-04-06'),
(7, 'Jennifer michelle', 'jennifer@example.com', '2020-05-06'),
(8, 'Alwyne furtado', 'Alwyne@example.com', '2019-05-06'),
(9, 'Alexa paddy', 'Alexa@example.com', '2021-06-06'),
(10, 'Alice Johnson', 'alicejohnson@example.com', '2020-03-05');

INSERT INTO Products (ProductID, Name, Category, Price) VALUES
(1, 'Laptop', 'Electronics', 999.99),
(2, 'Smartphone', 'Electronics', 499.99),
(3, 'Speakers', 'Electronics', 299.99),
(4, 'Headphones', 'Electronics', 199.99),
(5, 'Table fan', 'Electronics', 99.99),
(6, 'Television', 'Electronics', 399.99),
(7, 'Chair', 'Home Decor', 199.99),
(8, 'Table', 'Home Decor', 49.99),
(9, 'Air Cooler', 'Electronics', 594.99),
(10, 'Desk Lamp', 'Home Decor', 29.99);

INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount) VALUES
(1, 1, '2020-02-15', 1499.98),
(2, 2, '2020-02-17', 499.99),
(3, 6, '2020-02-15', 256.99),
(4, 8, '2020-02-18', 644.99),
(5, 5, '2020-02-25', 252.99),
(6, 9, '2020-03-14', 126.99),
(7, 6, '2020-03-23', 419.99),
(8, 8, '2020-03-22', 251.99),
(9, 3, '2020-03-29', 955.99),
(10, 6, '2020-03-21', 78.99);

INSERT INTO OrderDetails (OrderDetailID, OrderID, ProductID, Quantity, PricePerUnit) VALUES 
(1, 1, 1, 1, 999.99),
(2, 1, 2, 1, 499.99),
(3, 4, 5, 5, 566.99),
(4, 5, 6, 6, 569.99),
(5, 6, 7, 6, 456.99),
(6, 6, 8, 3, 44.99),
(7, 5, 9, 1, 64.99),
(8, 6, 6, 2, 644.99),
(9, 10, 6, 6, 199.99),
(10, 5, 5, 2, 29.99);

-- --1. Basic Queries;
--- -List all customers;
SELECT * FROM Customers;
--- all products in the 'Electronics' category;
SELECT * FROM Products WHERE Category = 'Electronics';
-- --Find the total number of orders placed;
SELECT COUNT(*) AS TotalOrders FROM Orders;
-- --Display the details of the most recent order;
SELECT * FROM Orders ORDER BY OrderDate DESC LIMIT 1;

-- 2. Joins and Relationships: 
-- 	List all products along with the names of the customers who ordered them.
SELECT P.ProductID, P.Name AS ProductName, O.OrderID, C.Name AS CustomerName
FROM Products P
JOIN OrderDetails OD ON P.ProductID = OD.ProductID
JOIN Orders O ON OD.OrderID = O.OrderID
JOIN Customers C ON O.CustomerID = C.CustomerID;

-- 	Show orders that include more than one product.
SELECT O.OrderID, COUNT(OD.OrderDetailID) AS ProductCount
FROM Orders O
JOIN OrderDetails OD ON O.OrderID = OD.OrderID
GROUP BY O.OrderID
HAVING ProductCount > 1;

	-- Find the total sales amount for each customer.
    SELECT C.CustomerID, C.Name AS CustomerName, SUM(O.TotalAmount) AS TotalSales
FROM Customers C
JOIN Orders O ON C.CustomerID = O.CustomerID
GROUP BY C.CustomerID, C.Name;

-- 3.	Aggregation and Grouping:
	-- Calculate the total revenue generated by each product category.
    SELECT P.Category, SUM(OD.Quantity * OD.PricePerUnit) AS TotalRevenue
FROM OrderDetails OD
JOIN Products P ON OD.ProductID = P.ProductID
GROUP BY P.Category;

	-- Determine the average order value.
    SELECT AVG(TotalAmount) AS AverageOrderValue FROM Orders;

-- 	Find the month with the highest number of orders.
SELECT MONTH(OrderDate) AS OrderMonth, COUNT(*) AS OrderCount
FROM Orders
GROUP BY OrderMonth
ORDER BY OrderCount DESC
LIMIT 1;

-- 4.	Subqueries and Nested Queries:
	-- Identify customers who have not placed any orders.
    SELECT * FROM Customers
WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM Orders);

	-- Find products that have never been ordered.
    SELECT * FROM Products
WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM OrderDetails);

-- 	Show the top 3 best-selling products.
SELECT P.ProductID, P.Name AS ProductName, SUM(OD.Quantity) AS TotalSold
FROM Products P
LEFT JOIN OrderDetails OD ON P.ProductID = OD.ProductID
GROUP BY P.ProductID, P.Name
ORDER BY TotalSold DESC
LIMIT 3;

-- 5.	Date and Time Functions:
-- 	List orders placed in the last month.
SELECT * FROM Orders
WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);

-- Determine the oldest customer in terms of membership duration.
SELECT * FROM Customers
ORDER BY JoinDate ASC
LIMIT 1;

-- 6.	Advanced Queries:
-- Rank customers based on their total spending.
SELECT C.CustomerID, C.Name, SUM(O.TotalAmount) AS TotalSpending,
       RANK() OVER (ORDER BY SUM(O.TotalAmount) DESC) AS SpendingRank
FROM Customers C
JOIN Orders O ON C.CustomerID = O.CustomerID
GROUP BY C.CustomerID, C.Name
ORDER BY SpendingRank;

-- Identify the most popular product category.
SELECT Category, COUNT(*) AS ProductCount
FROM OrderDetails OD
JOIN Products P ON OD.ProductID = P.ProductID
GROUP BY Category
ORDER BY ProductCount DESC
LIMIT 1;

-- Calculate the month-over-month growth rate in sales.
SELECT MONTH(OrderDate) AS OrderMonth,
       (SUM(TotalAmount) - LAG(SUM(TotalAmount)) OVER (ORDER BY MONTH(OrderDate))) / LAG(SUM(TotalAmount)) OVER (ORDER BY MONTH(OrderDate)) * 100 AS GrowthRate
FROM Orders
GROUP BY OrderMonth;

-- 7.	Data Manipulation and Updates:
-- 	Add a new customer to the Customers table.
INSERT INTO Customers (CustomerID, Name, Email, JoinDate)
VALUES (11, 'New Customer', 'newcustomer@example.com', '2024-01-11');

-- 	Update the price of a specific product.
UPDATE Products SET Price = 39.99 WHERE ProductID = 3;

